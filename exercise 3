/*
COMP1830 – Blockchain for Fintech Lab Exercise 3 – Smart Contract Development & Solidity Basics 2023-24 exercise 1.1 
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ValueTypes {
    // Public state variables
    bool public mybool = true;          // A boolean variable
    uint256 public mynum = 1830;        // An unsigned integer variable
    address public myaddr;              // An address variable

    // Constructor to set the contract address
    constructor() {
        myaddr = address(this);         // Setting myaddr to the contract's address
    }
}
/*
COMP1830 – Blockchain for Fintech Lab Exercise 3 – Smart Contract Development & Solidity Basics 2023-24 exercise 1.2 
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ReferenceTypes {
    // Define a custom struct
    struct Student {
        string name;      // Name of the student
        uint256 grade;    // Grade of the student
    }

    // Public mapping from address to Student
    mapping(address => Student) public studentRegistry;

    // Public fixed-length array of Students
    Student[10] public class;

    // Add a student to the studentRegistry mapping
    function addStudent(address _addr, string memory _name, uint256 _grade) public {
        studentRegistry[_addr] = Student(_name, _grade);
    }

    // Update a specific student in the class array
    function updateClass(uint256 _index, string memory _name, uint256 _grade) public {
        require(_index < class.length, "Index out of bounds");
        class[_index] = Student(_name, _grade);
    }

    // Retrieve a student from the class array
    function getClassStudent(uint256 _index) public view returns (string memory, uint256) {
        require(_index < class.length, "Index out of bounds");
        Student memory student = class[_index];
        return (student.name, student.grade);
    }
}
/*
COMP1830 – Blockchain for Fintech Lab Exercise 3 – Smart Contract Development & Solidity Basics 2023-24 exercise 3.1 
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExtendedUniModule {
    // Struct definition for a student
    struct Student {
        string name;
        string studentID;
        uint256 grade;
    }

    // Mapping to store registered students
    mapping(address => Student) public studentRegistry;

    // Address for the module representative
    address public moduleRep;

    // Function to register a student
    function register(string memory _name, string memory _studentID) public {
        require(bytes(_name).length > 0, "Name cannot be empty");
        require(bytes(_studentID).length > 0, "Student ID cannot be empty");

        studentRegistry[msg.sender] = Student({
            name: _name,
            studentID: _studentID,
            grade: 0
        });
    }

    // Function to set the module representative
    function setModuleRep(address _repAddress) public {
        require(studentRegistry[_repAddress].grade != 0, "Not a registered student");
        moduleRep = _repAddress;
    }
}
/*
COMP1830 – Blockchain for Fintech Lab Exercise 3 – Smart Contract Development & Solidity Basics 2023-24 exercise 3.2 
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PayableUniModule {
    // Struct definition for a student
    struct Student {
        string name;
        string studentID;
        uint256 grade;
    }

    // Mapping to store registered students
    mapping(address => Student) public studentRegistry;

    // Registration price
    uint256 public registrationPrice;

    // Constructor to set the registration price
    constructor(uint256 _price) {
        registrationPrice = _price;
    }

    // Function to register a student
    function register(string memory _name, string memory _studentID) public payable {
        require(msg.value == registrationPrice, "Incorrect registration fee");

        studentRegistry[msg.sender] = Student({
            name: _name,
            studentID: _studentID,
            grade: 0
        });
    }
}
/*
COMP1830 – Blockchain for Fintech Lab Exercise 3 – Smart Contract Development & Solidity Basics 2023-24 exercise 4.1 
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RestrictedUniModule {
    // Struct definition for a student
    struct Student {
        string name;
        string studentID;
        uint256 grade;
    }

    // Mapping to store registered students
    mapping(address => Student) public studentRegistry;

    // Address for the module leader and module representative
    address public moduleLeader;
    address public moduleRep;

    // Modifier to restrict access to the module leader
    modifier onlyModuleLeader() {
        require(msg.sender == moduleLeader, "Not the module leader");
        _;
    }

    // Constructor to set the module leader
    constructor() {
        moduleLeader = msg.sender;
    }

    // Function to register a student
    function register(string memory _name, string memory _studentID) public {
        studentRegistry[msg.sender] = Student({
            name: _name,
            studentID: _studentID,
            grade: 0
        });
    }

    // Restricted function to set the module representative
    function setModuleRep(address _repAddress) public onlyModuleLeader {
        require(studentRegistry[_repAddress].grade != 0, "Not a registered student");
        moduleRep = _repAddress;
    }
}




